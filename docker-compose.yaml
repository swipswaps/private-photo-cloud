version: '2'

services:
  postgres:
    image: postgres:9.6-alpine
    volumes:
      - ./data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: app
      PGDATA: /var/lib/postgresql/data
    restart: unless-stopped
  redis:
    image: redis:3-alpine
    restart: unless-stopped
    command:
      - redis-server
      - --appendonly
      - 'yes'
  backend: &BACKEND
    build:
      context: .
      dockerfile: backend.Dockerfile
    links:
      - postgres
      - redis
    environment: &BACKEND_ENV
      PYTHONUNBUFFERED: 1
      PYTHONIOENCODING: utf-8
      PYTHONDONTWRITEBYTECODE: 1
      PYTHONWARNINGS: all
      DATABASE_URL: postgres://user:password@postgres/app
      CHANNEL_REDIS_HOST: redis
      CHANNEL_REDIS_PORT: 6379
      CACHE_URL: redis://redis:6379/0?timeout=300
      CACHE_PERSISTENT_URL: redis://redis:6379/1
      EMAIL_URL: console://
      CELERY_BROKER_URL: redis://redis/2
# Do not store results of Celery tasks
      # CELERY_RESULT_URL: redis://redis/3
      DJANGO_SETTINGS_MODULE: private_photo_cloud.settings.default
      DJANGO_DEBUG: 1
      DJANGO_TEMPLATE_DEBUG: 1
      DJANGO_WS_PORT: 8001
    volumes:
      - .:/home/app
      - ./media:/home/app/media
    working_dir: /home/app
    restart: unless-stopped
    command:
      - sh
      - -ec
      - until psql $$DATABASE_URL -c "--" 2>/dev/null; do
          echo "wait...";
          sleep 1;
        done;
        ./manage.py migrate;
        ./manage.py shell -c 'from django.contrib.auth.models import User; u, _ = User.objects.get_or_create(username="admin", is_superuser=True, is_staff=True, is_active=True);u.set_password("password");u.save();';
        exec ./manage.py runserver 0.0.0.0:8000 --noasgi;
  worker:
    <<: *BACKEND
    ports: []
    user: nobody
    environment:
      <<: *BACKEND_ENV
      DJANGO_DEBUG: 0
    command:
      - celery
      - -A
      - private_photo_cloud
      - worker
      - --loglevel=INFO
      - --concurrency=4
# separate instance for websockets
  websockets:
    <<: *BACKEND
    ports:
    # An alternative for separate port is to place nginx proxy in front of both runserver and daphne
    # See https://channels.readthedocs.io/en/stable/deploying.html#running-asgi-alongside-wsgi
      - 8001:8001
    user: nobody
    environment:
      <<: *BACKEND_ENV
      DJANGO_DEBUG: 0
    command:
      - daphne
      - -b
      - 0.0.0.0
      - -p
      - "8001"
      - private_photo_cloud.asgi:channel_layer
  webworker:
    <<: *BACKEND
    ports: []
    user: nobody
    environment:
      <<: *BACKEND_ENV
      DJANGO_DEBUG: 0
# it got reloaded often and show warning too -> do not repeat
      PYTHONWARNINGS: once
    restart: unless-stopped
    command:
      - ./manage.py
      - runworker
# listen only websockets, ignore HTTP (while served by another instance)
      - --only-channels=websocket.*
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    links:
      - backend
    volumes:
      - ./frontend/js:/home/app/js
      - ./frontend/css:/home/app/css
      - ./frontend/img:/home/app/img
    ports:
    # internal and external port must be the same to keep websockets work
      - 80:80
    command: "npm run dev -- --host 0.0.0.0 --port 80 --hot"
